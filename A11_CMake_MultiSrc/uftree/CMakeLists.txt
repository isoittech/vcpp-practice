#####################################################
# CMakeのバージョン指定とプロジェクトの設定
#####################################################
cmake_minimum_required(VERSION 3.1)
project(mylib
    VERSION 1.0.0
    DESCRIPTION "Union-Find tree library"
    LANGUAGES CXX)
# ビルド対象の宣言とライブラリの種類の宣言。
# STATIC（静的リンクライブラリ）の他にSHARED（動的リンクライブラリ）、MODULE（動的ロード）がある。

#####################################################
# ライブラリの作成
#####################################################
add_library(uftree STATIC ./src/uftree.cpp)

#####################################################
# ビルドプロパティの指定
#####################################################
# target_*系のコマンドでは、ターゲット名の後にPUBLIC, PRIVATE, INTERFACEのいずれかを指定します。
# ターゲットが実行ファイルであるときはどれを選んでも関係ないのですが、ライブラリであるときはどれを選ぶのかによって挙動が以下のように変わります。
# 
# ・PUBLIC: コマンドの内容が"自分自身"と"自分に依存するターゲット"に反映される
# ・PRIVATE: コマンドの内容が"自分自身"にのみ反映される
# ・INTERFACE: コマンドの内容が"自分に依存するターゲット"にのみ反映される
#
# 例えば、今回のサンプルではuftreeライブラリをmain_appから利用します。 
# つまり"自分自身"＝uftreeで、"自分に依存するターゲット"＝main_appです。 
# 7行目のtarget_compile_featuresはUnionFindTree::show()の中身のための設定であり、
# main_appまでC++11規格でビルドする必要性はありません。 
# よってここではPRIVATEを指定しています。
#####################################################
target_compile_features(uftree PRIVATE cxx_std_11)

#####################################################
# インクルードディレクトリの指定
#####################################################
# 9行目のtarget_include_directoriesでは、uftreeのインクルードディレクトリを指定しています。
# 
# 今回の実装をよく見ていただくと、uftree.cppの中ではヘッダファイルを
# #include "../include/uftree.hpp"のように相対パスで参照しています。 
# これは2つのファイルの相対位置を変えることはないだろうという理由からです。 
# そのため、ターゲットuftreeをビルドするときに追加でインクルードディレクトリを指定する必要はありません。
# 
# しかしuftreeを参照するmain_appのmain.cppでは
# #include <uftree.hpp>のように参照したいところです。 
# なぜならプロジェクトを分離して運用することになった場合、
# 必ずしも相対パス./uftree/include/uftree.hppにヘッダファイルが置かれるとは限らないからです。 
# このためには、uftreeに依存するターゲットにuftreeのインクルードディレクトリを教えてやる必要があります。
# 
# というわけで、uftree自身には必要ないけどuftreeに依存するターゲットには
# インクルードディレクトリを追加したい、という状況なのでここではINTERFACEを指定しています。
target_include_directories(uftree INTERFACE ./include)

#####################################################
# ライブラリのプロパティ設定
#####################################################
# 10行目のset_target_propertiesでは、
# プロジェクトに設定したバージョン番号をそのままライブラリのバージョン番号に反映しています。
# 
# 後の章で解説しますがCMakeスクリプトには変数の概念があります。 
# そして、実は2-5行目でプロジェクトを設定したとき、
# 暗黙的にPROJECT_VERSIONとmylib_VERSIONという変数に1.0.0という値がセットされています。 
# 変数に格納されている値は${PROJECT_VERSION}のように${}で囲うことで値を展開できるので、
# 上のように書けばバージョン番号がそのままコピーされることになります。
# 
# わざわざバージョン番号を付けるのは説明の都合によるものなので、
# そんなこともできるんだなくらいの認識でOKです。
set_target_properties(uftree
    PROPERTIES
    VERSION ${mylib_VERSION})

